{"version":3,"sources":["components/Home/HomeView.jsx","components/Home/Home.js","components/Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["HomeView","props","react_default","a","createElement","Fragment","Home","console","log","Home_HomeView","Component","Map","state","viewport","latitude","longitude","zoom","accessToken","onViewportChange","width","height","etc","Object","objectWithoutProperties","_this","setState","_this2","this","id","esm","assign","mapStyle","mapboxApiAccessToken","class","offsetLeft","offsetTop","App","className","react_router_dom","to","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAQeA,SAJE,SAACC,GAChB,OAAOC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,eCcMC,8LAZXC,QAAQC,IAAI,iEAIZD,QAAQC,IAAI,sDAIZ,OAAON,EAAAC,EAAAC,cAACK,EAAD,aAXQC,qCCwCJC,6MApCbC,MAAQ,CACNC,SAAU,CACRC,SAAU,GACVC,WAAY,IACZC,KAAM,GAERC,YAAa,gGAIfC,iBAAmB,SAAAL,GACeA,EAAzBM,MAAyBN,EAAlBO,OADe,IACJC,EADIC,OAAAC,EAAA,EAAAD,CACGT,EADH,oBAE7BW,EAAKC,SAAS,CAACZ,SAAUQ,6EAGlB,IAAAK,EAAAC,KACDd,EAAWc,KAAKf,MAAMC,SAC5B,OACEX,EAAAC,EAAAC,cAAA,OAAKwB,GAAG,iBACN1B,EAAAC,EAAAC,cAACyB,EAAA,EAADP,OAAAQ,OAAA,CACEV,OAAO,OACPD,MAAM,OACNY,SAAS,sCACLlB,EAJN,CAKEmB,qBAAsBL,KAAKf,MAAMK,YACjCC,iBAAkB,SAAAL,GAAQ,OAAIa,EAAKR,iBAAiBL,MAEpDX,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAOI,MAAM,SAASnB,SAAU,GAAMC,WAAY,GAAMmB,YAAa,GAAIC,WAAY,IACnFjC,EAAAC,EAAAC,cAAA,6BA9BMM,aCuBH0B,mLAfX,OACElC,EAAAC,EAAAC,cAAA,OAAKiC,UAAU,OACbnC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAMC,GAAG,KAAT,eACArC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CAAMC,GAAG,gBAAT,iBAEFrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,KACEtC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrC,IACjCJ,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAWhC,aAV5BD,aCAEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACPhD,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACEpC,EAAAC,EAAAC,cAAC+C,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7f5cf346.chunk.js","sourcesContent":["import React from \"react\"\n\nimport style from \"./Home.css\";\n\nconst HomeView = (props) => {\n  return <>Home</>\n}\n\nexport default HomeView","import React, { Component } from \"react\"\n\nimport HomeView from './HomeView'\n\nclass Home extends Component {\n  \n  componentDidMount () {\n    console.log('Home Did Mount')\n  }\n\n  componentWillUnmount () {\n    console.log('Home Will unMount')\n  }\n  \n  render() {\n    return <HomeView/>\n  }\n}\n\nexport default Home","import React, { Component } from \"react\"\n\nimport style from './Map.css'\n\nimport ReactMapGL, { Popup }from 'react-map-gl';\n\nclass Map extends Component {\n\n  state = {\n    viewport: {\n      latitude: 19.0,\n      longitude: -100.0,\n      zoom: 6\n    },\n    accessToken: 'pk.eyJ1IjoicmFsZXhyZHoiLCJhIjoiY2lmdHB2aGo2MTZ4MnQ1bHkzeDJyaDMzNyJ9.UHhEm9gA1_uwAztXjb7iTQ'\n\n  };\n\n  onViewportChange = viewport => { \n    const {width, height, ...etc} = viewport\n    this.setState({viewport: etc})\n  } \n\n  render() {\n    const viewport = this.state.viewport\n    return (\n      <div id=\"map-container\">\n        <ReactMapGL\n          height=\"100%\"\n          width=\"100%\"\n          mapStyle=\"mapbox://styles/mapbox/outdoors-v9\"\n          {...viewport}\n          mapboxApiAccessToken={this.state.accessToken}\n          onViewportChange={viewport => this.onViewportChange(viewport)}\n        >\n          <Popup class=\"marker\" latitude={19.0} longitude={-99.0} offsetLeft={-20} offsetTop={-10}>\n            <div>Hola</div>\n          </Popup>\n        </ReactMapGL>\n      </div>\n    );\n  }\n}\n\nexport default Map","import React, { Component } from 'react';\nimport './App.css';\n\n\nimport {Switch, Route, Link} from 'react-router-dom';\n\n// import ListaProductos from \"./components/ListaProductos\";\n// import FormularioProductos from \"./components/FormularioProducto\";\n// import MiCarrito from \"./components/MiCarrito\";\nimport Home from \"./components/Home/Home\";\nimport Map from \"./components/Map/Map\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <Link to=\"/\"> Prodcutos </Link>\n          <Link to=\"/new-product\"> + Producto </Link>\n        </header>\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n          <Route exact path=\"/map\" component={Map}/>\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}